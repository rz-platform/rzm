# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Default path
GET     /                           controllers.AuthController.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Login
GET     /signin              controllers.AuthController.loginPage()
POST     /signin              controllers.AuthController.login()

# Sign up
GET     /signup              controllers.AccountController.signup()
POST     /signup              controllers.AccountController.saveAccount()

# Log out
GET /logout controllers.AuthController.logout()

# Repositories list

GET /repositories      controllers.RzRepositoryController.list()

# Repositories creation

GET /repositories/create controllers.RzRepositoryController.createRepository()
POST /repositories/create controllers.RzRepositoryController.saveRepository()

# File view

# Repository view

GET /repositories/:account/:repository/tree/:rev controllers.FileTreeController.emptyTree(account:String, repository:String, rev: String)
GET /repositories/:account/:repository/tree/:rev/*path controllers.FileTreeController.blob(account:String, repository:String, rev: String, path: String)

# Raw view

GET /repositories/:account/:repository/raw/:rev/*path controllers.FileTreeController.raw(account:String, repository:String, rev: String, path: String)

# Constructor

GET /repositories/:account/:repository/constructor controllers.TemplateController.list(account:String, repository:String)
POST /repositories/:account/:repository/constructor/build controllers.TemplateController.build(account:String, repository:String)

# File upload

GET /repositories/:account/:repository/upload/:rev controllers.FileUploadController.uploadPage(account:String, repository:String, rev: String, path: String = "")
GET /repositories/:account/:repository/upload/:rev/*path controllers.FileUploadController.uploadPage(account:String, repository:String, rev: String, path: String)
POST /repositories/:account/:repository/upload/:rev controllers.FileUploadController.upload(account:String, repository:String, rev: String)


# Collaborators

GET /repositories/:account/:repository/collaborators controllers.CollaboratorsController.collaboratorsPage(account:String, repository:String)
POST /repositories/:account/:repository/collaborators controllers.CollaboratorsController.addCollaborator(account:String, repository:String)
POST /repositories/:account/:repository/collaborators/remove controllers.CollaboratorsController.removeCollaborator(account:String, repository:String)

# Creation / Editing

POST /repositories/:account/:repository/edit controllers.FileTreeController.edit(account:String, repository:String)
POST /repositories/:account/:repository/createItem controllers.FileTreeController.addNewItem(account: String, repository: String)

# Repository archive

GET /repositories/:account/:repository/:rev/archive controllers.RzRepositoryController.downloadRepositoryArchive(account:String, repository:String, rev: String)

# Profile editing page

GET /profile controllers.AccountController.accountPage()
GET /profile/image/:account controllers.AccountController.accountPicture(account)
POST /profile/image/delete controllers.AccountController.removeAccountPicture()
POST /profile controllers.AccountController.editAccount()
POST /profilePassword controllers.AccountController.updatePassword()
POST  /uploadProfilePage controllers.AccountController.uploadAccountPicture()

# SSH Keys
GET /profile/keys controllers.SshKeyController.keysPage()
POST /profile/keys/add controllers.SshKeyController.addSshKey()
POST /profile/keys/delete controllers.SshKeyController.deleteSshKey()

# Commit log
GET /repositories/:account/:repository/commits/:rev controllers.RzRepositoryController.commitLog(account:String, repository:String, rev: String, page: Int = 1)
GET /repositories/:account/:repository/commits/:rev/:page controllers.RzRepositoryController.commitLog(account:String, repository:String, rev: String, page: Int)
