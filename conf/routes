# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Default path
GET     /                           users.controllers.AuthController.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Login
GET      /signin              users.controllers.AuthController.loginPage()
POST     /signin              users.controllers.AuthController.login()

# Sign up
GET      /signup              users.controllers.AccountController.signup()
POST     /signup              users.controllers.AccountController.saveAccount()

# Log out
GET /logout users.controllers.AuthController.logout()

# Repositories list

GET /repositories      documents.controllers.RzRepositoryController.list()

# Repositories creation

GET  /repositories/create documents.controllers.RzRepositoryController.createPage()
POST /repositories/create documents.controllers.RzRepositoryController.save()

# File view

# Repository view

GET /repositories/:account/:repository/tree/:rev documents.controllers.FileViewController.emptyTree(account:String, repository:String, rev: String)
GET /repositories/:account/:repository/tree/:rev/*path documents.controllers.FileViewController.blob(account:String, repository:String, rev: String, path: String)

# Raw view

GET /repositories/:account/:repository/raw/:rev/*path documents.controllers.FileViewController.raw(account:String, repository:String, rev: String, path: String)

# Creator

GET /creator/:templateId/illustration templates.controllers.TemplateController.templatePdf(templateId: String)

GET  /creator templates.controllers.TemplateController.overview()
GET  /creator/:templateId templates.controllers.TemplateController.view(templateId: String)
POST /creator/build templates.controllers.TemplateController.build()

# File upload

GET  /repositories/:account/:repository/upload/:rev documents.controllers.FileUploadController.uploadPage(account:String, repository:String, rev: String, path: String = "")
GET  /repositories/:account/:repository/upload/:rev/*path documents.controllers.FileUploadController.uploadPage(account:String, repository:String, rev: String, path: String)
POST /repositories/:account/:repository/upload/:rev documents.controllers.FileUploadController.upload(account:String, repository:String, rev: String)


# Collaborators

GET  /repositories/:account/:repository/collaborators collaborators.controllers.CollaboratorsController.page(account:String, repository:String)
POST /repositories/:account/:repository/collaborators collaborators.controllers.CollaboratorsController.add(account:String, repository:String)
POST /repositories/:account/:repository/collaborators/remove collaborators.controllers.CollaboratorsController.remove(account:String, repository:String)

# Creation / Editing

POST /repositories/:account/:repository/edit          documents.controllers.FileEditController.edit(account:String, repository:String)

GET  /repositories/:account/:repository/create/file/:rev documents.controllers.FileEditController.addNewItemPage(account:String, repository:String, rev: String, path: String = "")
GET  /repositories/:account/:repository/create/file/:rev/*path documents.controllers.FileEditController.addNewItemPage(account:String, repository:String, rev: String, path: String)

GET  /repositories/:account/:repository/create/folder/:rev documents.controllers.FileEditController.addNewFolderPage(account:String, repository:String, rev: String, path: String = "")
GET  /repositories/:account/:repository/create/folder/:rev/*path documents.controllers.FileEditController.addNewFolderPage(account:String, repository:String, rev: String, path: String)

POST /repositories/:account/:repository/create/item   documents.controllers.FileEditController.addNewItem(account: String, repository: String)

# Repository archive

GET /repositories/:account/:repository/:rev/archive documents.controllers.RzRepositoryController.downloadArchive(account:String, repository:String, rev: String)

# Profile editing page

GET  /profile users.controllers.AccountController.accountPage()
GET  /profile/image/:account users.controllers.AccountPictureController.accountPicture(account)
POST /profile/image users.controllers.AccountPictureController.uploadAccountPicture()
POST /profile/image/delete users.controllers.AccountPictureController.removeAccountPicture()
POST /profile users.controllers.AccountController.editAccount()
POST /profile/password users.controllers.AccountController.updatePassword()
POST /profile/tz users.controllers.AccountController.setTimeZone()

# SSH Keys

GET  /profile/keys ssh.controllers.SshKeyController.page()
POST /profile/keys/add ssh.controllers.SshKeyController.addKey()
POST /profile/keys/delete ssh.controllers.SshKeyController.deleteKey()

# Commit log

GET /repositories/:account/:repository/commits/:rev documents.controllers.RzRepositoryController.commitLog(account:String, repository:String, rev: String, page: Int = 1)
GET /repositories/:account/:repository/commits/:rev/:page documents.controllers.RzRepositoryController.commitLog(account:String, repository:String, rev: String, page: Int)
