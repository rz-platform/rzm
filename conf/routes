# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Default path
GET     /                           controllers.AccountController.index

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Login
GET     /signin              controllers.AccountController.login
POST     /signin              controllers.AccountController.authenticate

# Sign up
GET     /signup              controllers.AccountController.register
POST     /signup              controllers.AccountController.saveUser

# Log out
GET /logout controllers.AccountController.logout

# Repositories list

GET /repositories      controllers.GitEntitiesController.list

# Repositories creation

GET /repositories/create controllers.GitEntitiesController.createRepository
POST /repositories/create controllers.GitEntitiesController.saveRepository

# Repository view

GET /repositories/:account/:repository/tree/:rev controllers.GitEntitiesController.view(account:String, repository:String, path: String = ".", rev)
GET /repositories/:account/:repository/tree/:rev/*path controllers.GitEntitiesController.view(account:String, repository:String, path: String, rev: String)

# Blob view

GET /repositories/:account/:repository/blob/:rev/*path controllers.GitEntitiesController.blob(account:String, repository:String, rev: String, path: String)

# Raw view

GET /repositories/:account/:repository/raw/:rev/*path controllers.GitEntitiesController.raw(account:String, repository:String, rev: String, path: String)


# File upload

GET /repositories/:account/:repository/upload/:rev controllers.GitEntitiesController.uploadPage(account:String, repository:String, rev: String, path: String = "")
GET /repositories/:account/:repository/upload/:rev/*path controllers.GitEntitiesController.uploadPage(account:String, repository:String, rev: String, path: String)
POST /repositories/:account/:repository/upload/:rev controllers.GitEntitiesController.upload(account:String, repository:String, rev: String)


# Collaborators

GET /repositories/:account/:repository/collaborators controllers.GitEntitiesController.addCollaboratorPage(account:String, repository:String)
POST /repositories/:account/:repository/collaborators controllers.GitEntitiesController.addCollaboratorAction(account:String, repository:String)
POST /repositories/:account/:repository/collaborators/remove controllers.GitEntitiesController.removeCollaboratorAction(account:String, repository:String)

# Creation / Editing

POST /repositories/:account/:repository/edit controllers.GitEntitiesController.edit(account:String, repository:String)
POST /repositories/:account/:repository/createItem controllers.GitEntitiesController.addNewItem(account: String, repository: String, path: String, isFolder: Boolean)

# Repository archive

GET /repositories/:account/:repository/archive controllers.GitEntitiesController.downloadRepositoryArchive(account:String, repository:String, revision: String = "master")

# Profile editing page

GET /profile controllers.AccountController.profilePage
GET /profile/image/:account controllers.AccountController.profilePicture(account)
POST /profile/image/delete controllers.AccountController.removeProfilePicture
POST /profile controllers.AccountController.editProfile
POST /profilePassword controllers.AccountController.updatePassword
POST  /uploadProfilePage controllers.AccountController.uploadProfilePicture()

# SSH Keys
GET /profile/keys controllers.AccountController.keysPage
POST /profile/keys/add controllers.AccountController.addSshKey
POST /profile/keys/delete controllers.AccountController.deleteSshKey

# Commit log
GET /repositories/:account/:repository/commits/:rev controllers.GitEntitiesController.commitLog(account:String, repository:String, rev: String, page: Int = 1)
GET /repositories/:account/:repository/commits/:rev/:page controllers.GitEntitiesController.commitLog(account:String, repository:String, rev: String, page: Int)
